Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_udivmodhi4.o)
                              main.o (__udivmodhi4)
/usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_divmodhi4.o)
                              /tmp/ccymbTKX.o (__divmodhi4)
/usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o (exit)
/usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

key_pressed         0x1               main.o
optoloader          0x7               main.o

Discarded input sections

 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
 .stab          0x0000000000000000      0x6b4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
 .stabstr       0x0000000000000000       0x64 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
 .text          0x0000000000000000        0x0 main.o
 .data          0x0000000000000000        0x0 main.o
 .bss           0x0000000000000000        0x0 main.o
 .stab          0x0000000000000000     0x1230 main.o
 .stabstr       0x0000000000000000      0xc99 main.o
 .text.shiftOnes
                0x0000000000000000       0x26 main.o
 .bss.debounce  0x0000000000000000        0x1 main.o
 .text          0x0000000000000000        0x0 /tmp/ccTZC58E.o
 .data          0x0000000000000000        0x0 /tmp/ccTZC58E.o
 .bss           0x0000000000000000        0x0 /tmp/ccTZC58E.o
 .stab          0x0000000000000000      0x51c /tmp/ccTZC58E.o
 .stabstr       0x0000000000000000      0x7d0 /tmp/ccTZC58E.o
 .text.disableSPI
                0x0000000000000000        0x8 /tmp/ccTZC58E.o
 .text.received_from_spi
                0x0000000000000000        0x6 /tmp/ccTZC58E.o
 .text          0x0000000000000000        0x0 /tmp/cc4MMV8U.o
 .data          0x0000000000000000        0x0 /tmp/cc4MMV8U.o
 .bss           0x0000000000000000        0x0 /tmp/cc4MMV8U.o
 .stab          0x0000000000000000      0x378 /tmp/cc4MMV8U.o
 .stabstr       0x0000000000000000      0x771 /tmp/cc4MMV8U.o
 .text          0x0000000000000000        0x0 /tmp/cctzHYbb.o
 .data          0x0000000000000000        0x0 /tmp/cctzHYbb.o
 .bss           0x0000000000000000        0x0 /tmp/cctzHYbb.o
 .stab          0x0000000000000000      0x324 /tmp/cctzHYbb.o
 .stabstr       0x0000000000000000      0x7ad /tmp/cctzHYbb.o
 .rodata.channelA
                0x0000000000000000      0x200 /tmp/cctzHYbb.o
 .rodata.channelB
                0x0000000000000000      0x200 /tmp/cctzHYbb.o
 .rodata.channelD
                0x0000000000000000      0x200 /tmp/cctzHYbb.o
 .text          0x0000000000000000        0x0 /tmp/ccg4Fuir.o
 .data          0x0000000000000000        0x0 /tmp/ccg4Fuir.o
 .bss           0x0000000000000000        0x0 /tmp/ccg4Fuir.o
 .stab          0x0000000000000000      0x504 /tmp/ccg4Fuir.o
 .stabstr       0x0000000000000000      0x7a2 /tmp/ccg4Fuir.o
 .text.readButton
                0x0000000000000000       0x84 /tmp/ccg4Fuir.o
 .text          0x0000000000000000        0x0 /tmp/ccTl6NuH.o
 .data          0x0000000000000000        0x0 /tmp/ccTl6NuH.o
 .bss           0x0000000000000000        0x0 /tmp/ccTl6NuH.o
 .stab          0x0000000000000000      0x63c /tmp/ccTl6NuH.o
 .stabstr       0x0000000000000000      0x7d9 /tmp/ccTl6NuH.o
 .text.clearDisplay
                0x0000000000000000       0x12 /tmp/ccTl6NuH.o
 .text          0x0000000000000000        0x0 /tmp/ccymbTKX.o
 .data          0x0000000000000000        0x0 /tmp/ccymbTKX.o
 .bss           0x0000000000000000        0x0 /tmp/ccymbTKX.o
 .stab          0x0000000000000000      0x63c /tmp/ccymbTKX.o
 .stabstr       0x0000000000000000      0x8b3 /tmp/ccymbTKX.o
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_udivmodhi4.o)
 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_udivmodhi4.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_udivmodhi4.o)
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_divmodhi4.o)
 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_divmodhi4.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_divmodhi4.o)
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_exit.o)
 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_exit.o)
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_copy_data.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_copy_data.o)
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_clear_bss.o)
 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_clear_bss.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_clear_bss.o)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
LOAD main.o
LOAD /tmp/ccTZC58E.o
LOAD /tmp/cc4MMV8U.o
LOAD /tmp/cctzHYbb.o
LOAD /tmp/ccg4Fuir.o
LOAD /tmp/ccTl6NuH.o
LOAD /tmp/ccymbTKX.o
LOAD /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0xf12
 *(.vectors)
 .vectors       0x0000000000000000       0x68 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000068                . = ALIGN (0x2)
                0x0000000000000068                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000068        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000068                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000068                __ctors_start = .
 *(.ctors)
                0x0000000000000068                __ctors_end = .
                0x0000000000000068                __dtors_start = .
 *(.dtors)
                0x0000000000000068                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000068        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
                0x0000000000000068                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000068        0xc /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000074       0x16 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_copy_data.o)
                0x0000000000000074                __do_copy_data
 .init4         0x000000000000008a       0x10 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_clear_bss.o)
                0x000000000000008a                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000000000009a        0x8 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
 *(.init9)
 *(.text)
 .text          0x00000000000000a2        0x4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr5/crtm328p.o
                0x00000000000000a2                __vector_22
                0x00000000000000a2                __vector_1
                0x00000000000000a2                __vector_24
                0x00000000000000a2                __vector_12
                0x00000000000000a2                __bad_interrupt
                0x00000000000000a2                __vector_6
                0x00000000000000a2                __vector_3
                0x00000000000000a2                __vector_25
                0x00000000000000a2                __vector_13
                0x00000000000000a2                __vector_17
                0x00000000000000a2                __vector_19
                0x00000000000000a2                __vector_5
                0x00000000000000a2                __vector_4
                0x00000000000000a2                __vector_9
                0x00000000000000a2                __vector_2
                0x00000000000000a2                __vector_21
                0x00000000000000a2                __vector_15
                0x00000000000000a2                __vector_8
                0x00000000000000a2                __vector_14
                0x00000000000000a2                __vector_10
                0x00000000000000a2                __vector_16
                0x00000000000000a2                __vector_18
                0x00000000000000a2                __vector_20
                0x00000000000000a6                . = ALIGN (0x2)
 *(.text.*)
 .text.setupControlTimer
                0x00000000000000a6       0x46 main.o
                0x00000000000000a6                setupControlTimer
 .text.setupSampleRate
                0x00000000000000ec       0x3a main.o
                0x00000000000000ec                setupSampleRate
 .text.__vector_11
                0x0000000000000126      0x39e main.o
                0x0000000000000126                __vector_11
 .text.__vector_23
                0x00000000000004c4       0xac main.o
                0x00000000000004c4                __vector_23
 .text.__vector_7
                0x0000000000000570      0x1b4 main.o
                0x0000000000000570                __vector_7
 .text.main     0x0000000000000724      0x48e main.o
                0x0000000000000724                main
 .text.setupSPI
                0x0000000000000bb2       0x7a /tmp/ccTZC58E.o
                0x0000000000000bb2                setupSPI
 .text.sendSPI  0x0000000000000c2c        0xc /tmp/ccTZC58E.o
                0x0000000000000c2c                sendSPI
 .text.writeMCP492x
                0x0000000000000c38       0x1e /tmp/cc4MMV8U.o
                0x0000000000000c38                writeMCP492x
 .text.setupButtons
                0x0000000000000c56       0x26 /tmp/ccg4Fuir.o
                0x0000000000000c56                setupButtons
 .text.readKeyboard
                0x0000000000000c7c       0x12 /tmp/ccg4Fuir.o
                0x0000000000000c7c                readKeyboard
 .text.readSettings
                0x0000000000000c8e       0x14 /tmp/ccg4Fuir.o
                0x0000000000000c8e                readSettings
 .text.setupDisplay
                0x0000000000000ca2       0x10 /tmp/ccTl6NuH.o
                0x0000000000000ca2                setupDisplay
 .text.setDisplay
                0x0000000000000cb2        0x6 /tmp/ccTl6NuH.o
                0x0000000000000cb2                setDisplay
 .text.updateDisplay
                0x0000000000000cb8       0x86 /tmp/ccTl6NuH.o
                0x0000000000000cb8                updateDisplay
 .text.disableOptoloader
                0x0000000000000d3e        0xc /tmp/ccymbTKX.o
                0x0000000000000d3e                disableOptoloader
 .text.setupOptoloader
                0x0000000000000d4a       0x56 /tmp/ccymbTKX.o
                0x0000000000000d4a                setupOptoloader
 .text.enableOptoloader
                0x0000000000000da0       0x1c /tmp/ccymbTKX.o
                0x0000000000000da0                enableOptoloader
 .text.runOptoloader
                0x0000000000000dbc      0x104 /tmp/ccymbTKX.o
                0x0000000000000dbc                runOptoloader
 .text.libgcc   0x0000000000000ec0       0x28 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_udivmodhi4.o)
                0x0000000000000ec0                __udivmodhi4
 .text.libgcc   0x0000000000000ee8       0x26 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_divmodhi4.o)
                0x0000000000000ee8                __divmodhi4
                0x0000000000000ee8                _div
                0x0000000000000f0e                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000f0e        0x0 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_exit.o)
                0x0000000000000f0e                exit
                0x0000000000000f0e                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000f0e        0x4 /usr/lib/gcc/avr/4.3.5/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000000f12                _etext = .

.data           0x0000000000800100      0x24a load address 0x0000000000000f12
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 *(.data*)
 .data.mode     0x0000000000800100        0x1 main.o
                0x0000000000800100                mode
 .data.sequencer
                0x0000000000800101        0x8 main.o
                0x0000000000800101                sequencer
 .data.scales   0x0000000000800109       0x40 main.o
                0x0000000000800109                scales
 *(.rodata)
 *(.rodata*)
 .rodata.channelC
                0x0000000000800149      0x200 /tmp/cctzHYbb.o
                0x0000000000800149                channelC
 *(.gnu.linkonce.d*)
                0x000000000080034a                . = ALIGN (0x2)
 *fill*         0x0000000000800349        0x1 00
                0x000000000080034a                _edata = .
                0x000000000080034a                PROVIDE (__data_end, .)

.bss            0x000000000080034a       0x39
                0x000000000080034a                PROVIDE (__bss_start, .)
 *(.bss)
 *(.bss*)
 .bss.opto_enable_ctr
                0x000000000080034a        0x1 main.o
                0x000000000080034a                opto_enable_ctr
 .bss.keyboard_ctr
                0x000000000080034b        0x1 main.o
                0x000000000080034b                keyboard_ctr
 .bss.sequencer_ctr
                0x000000000080034c        0x1 main.o
                0x000000000080034c                sequencer_ctr
 .bss.msg_ctr   0x000000000080034d        0x1 main.o
                0x000000000080034d                msg_ctr
 .bss.sequencer_display_i
                0x000000000080034e        0x1 main.o
                0x000000000080034e                sequencer_display_i
 .bss.sequencer_metronome
                0x000000000080034f        0x1 main.o
                0x000000000080034f                sequencer_metronome
 .bss.sequencer_metronome_ctr
                0x0000000000800350        0x1 main.o
                0x0000000000800350                sequencer_metronome_ctr
 .bss.sequencer_flag
                0x0000000000800351        0x1 main.o
                0x0000000000800351                sequencer_flag
 .bss.led_refresh_flag
                0x0000000000800352        0x1 main.o
                0x0000000000800352                led_refresh_flag
 .bss.led_display
                0x0000000000800353        0x1 main.o
                0x0000000000800353                led_display
 .bss.read_keyboard_flag
                0x0000000000800354        0x1 main.o
                0x0000000000800354                read_keyboard_flag
 .bss.settings_debounce
                0x0000000000800355        0x1 main.o
                0x0000000000800355                settings_debounce
 .bss.scale_i   0x0000000000800356        0x1 main.o
                0x0000000000800356                scale_i
 .bss.poly_buffer
                0x0000000000800357       0x10 main.o
                0x0000000000800357                poly_buffer
 .bss.poly_i    0x0000000000800367        0x1 main.o
                0x0000000000800367                poly_i
 .bss.final.1422
                0x0000000000800368        0x2 main.o
 .bss.inc.1421  0x000000000080036a       0x10 main.o
 .bss.num_bytes.1383
                0x000000000080037a        0x1 main.o
 *(COMMON)
 COMMON         0x000000000080037b        0x8 main.o
                0x000000000080037b                key_pressed
                0x000000000080037c                optoloader
                0x0000000000800383                PROVIDE (__bss_end, .)
                0x0000000000000f12                __data_load_start = LOADADDR (.data)
                0x000000000000115c                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800383        0x0
                0x0000000000800383                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800383                PROVIDE (__noinit_end, .)
                0x0000000000800383                _end = .
                0x0000000000800383                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab
 *(.stab)

.stabstr
 *(.stabstr)

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(main.elf elf32-avr)
LOAD linker stubs
